# -*- coding: utf-8 -*-
# @Author: orres
# @Email:  jasonjin22@gmail.com
# @Date:   2019-05-01 20:34:40
# @Last Modified by:   orres
# @Last Modified time: 2019-05-03 23:26:02
import copy
import math
import psutil
import os

# return the suffix array of the input
def getSA(T_segment):
	sorting_array = []
	sa = []
	# T_segment += '$'
	for i in range(len(T_segment)):
		suffix = T_segment[i:] + T_segment[0:i]
		sorting_array.append((suffix, i))
	sorting_array.sort()
	sa = [x[1] for x in sorting_array]
	return sa

# return the inverse of the suffix array of the input suffix array
def get_inv_SA(sa):
	sa_length = len(sa)
	inv_sa = []
	for i in range(sa_length):
		inv_sa.append(0)
	for i in range(sa_length):
		inv_sa[sa[i]] = i
	return inv_sa

# return compressed suffix array psi from sa and inv_sa
# where psi[i] = inv_sa[sa[i] + 1] (i = 1 ... end)
def get_psi(sa, inv_sa):
	psi_length = len(sa)
	psi = []
	for i in range(psi_length):
		psi.append(0)
	psi[0] = inv_sa[0]
	for i in range(1, psi_length):
		psi[i] = inv_sa[sa[i] + 1]
	return psi

def brute_force_init_phi(T_segment):
	# maybe can be improved with Larsson and Sadakane
	sa = getSA(T_segment)
	inv_sa = get_inv_SA(sa)
	psi = get_psi(sa, inv_sa)
	return psi


# the rank of A_k among LS(A) when only the first l characters are considered
# in the paper, it is said use Larsson and Sadakane, required time is O(l*logl)
############################################
################ TO IMPROVE ################
############################################
def get_P(seg, new_seg):
	two_chunks = new_seg + seg
	P = []
	l = len(new_seg)
	sorting_array = []
	for i in range(l):
		P.append(0)
	for i in range(l):
		sorting_array.append((two_chunks[i:i + l], i))
	# print(sorting_array)
	sorting_array.sort()
	# print(sorting_array)
	for i in range(l):
		P[sorting_array[i][1]] = i
	return P

# Q stores the rank of B_k among S(B), which equals to invSA_b[k]
def get_Q(psi_b, k):
	# print('psi_b', psi_b)
	# print('k', k)
	Q = []
	for i in range(k):
		Q.append(0)
	index = psi_b[0]
	for i in range(k):
		Q[i] = index
		# print('index', index)
		index = psi_b[index]
	return Q

# compute M which stores the rank of long suffixes among themselves
def get_M(psi_b, seg, new_seg):
	# P stores the rank of A_k among LS(A) when only first l characters are considered
	M = []
	l = len(new_seg)
	for i in range(l):
		M.append(0)
	P = get_P(seg, new_seg)
	# print('P', P)
	# Q stores the rank of B_k among S(B), which equals to invSA_b[k]
	# print(seg, new_seg)
	Q = get_Q(psi_b, l)
	# print('Q', Q)
	sorting_array = []
	for i in range(l):
		sorting_array.append((P[i], Q[i], i))
	sorting_array.sort()
	for i in range(l):
		M[sorting_array[i][2]] = i
	return M

# return the number of suffixes of B starting with 'c'
def gamma(B, c):
	result = 0
	for i in B:
		if i == c:
			result += 1
	return result

# return the number of suffixes of B whose start char is smaller than 'c'
def alpha(B, c):
	result = 0
	for i in B:
		if i < c:
			result +=1
	return result

# because psi_b in the searching range RBc is increasing,
# so use binary search can accelate the searching
def bin_search_L(RBc, psi_b, benchmark):
	if psi_b[RBc[-1]] < benchmark:
		return [RBc[-1]]
	if (RBc[-1] - RBc[0] <= 5):
		# when the range is small enough, directly compute
		tem = []
		for i in RBc:
			if psi_b[i] < benchmark:
				tem.append(i)
		return tem
	else:
		middle_index = RBc[0] + math.floor((RBc[-1] - RBc[0]) / 2)
		middle_num = psi_b[middle_index]
		if (middle_num < benchmark):
			return bin_search_L(range(middle_index, RBc[-1] + 1), psi_b, benchmark)
		else:
			return bin_search_L(range(RBc[0], middle_index + 1), psi_b, benchmark)

# compute L which stores the rank of long suffixes among S(B)
def get_L(B, psi_b, seg, new_seg):
	L = []
	l = len(new_seg)
	L = [0 for i in range(l)]
	k = l - 1
	# print('psi_b',psi_b)
	while k >= 0:
		c = new_seg[k]
		RBc = range(alpha(B, c), alpha(B, c) + gamma(B, c))
		# print('c:', c, 'RBc', RBc)
		# print(B, c)
		if (k == l - 1):
			benchmark = psi_b[0]
		else:
			benchmark = L[k + 1]

		# method 1: use binary search as optimization
		if (gamma(B, c) == 0): tem = []
		else: tem = bin_search_L(RBc, psi_b, benchmark)
		# 
		# method 2: directly compute the array, with no optimization
		# tem = []
		# for i in RBc:
		# 	if psi_b[i] < benchmark:
		# 		tem.append(i)

		if (len(tem) == 0):
			# does not exist the r
			# print('alpha')
			L[k] = alpha(B, c)
		else:
			# print('max')
			L[k] = max(tem) + 1
		k -= 1
	return L

def rank0(V, i):
	result = 0
	j = 0
	while j < i:
		if (V[j] == 0):
			result += 1
		j += 1
	return result

def rank1(V, i):
	result = 0
	j = 0
	while j < i:
		if (V[j] == 1):
			result += 1
		j += 1
	return result

def select0(V, j):
	c = copy.deepcopy(j)
	for i in range(len(V)):
		if (V[i] == 0):
			c -= 1
		if (c == 0):
			return i

# compute psi_a from psi_b
# psi_b is the computed psi from last iteration
def next_psi(psi_b, seg, new_seg, B):
	l = len(new_seg)
	m = len(new_seg + B)
	# M stores the rank of long suffixes among themselves
	M = get_M(psi_b, seg, new_seg)
	# L stores the rank of long suffixes among S(B)
	L = get_L(B, psi_b, seg, new_seg)
	inv_M = [0 for i in range(len(M))]
	# print('M', M)
	# print('L', L)
	for i in range(len(M)):
		inv_M[M[i]] = i
	# print('inv_M', inv_M)
	print('construct V')
	V = [0 for i in range(m)]
	sorted_L = sorted(L)
	V_index = 0
	for i in range(sorted_L[0]):
		V[V_index] = 0
		V_index += 1
	V[V_index] = 1
	V_index += 1
	for i in range(l - 1):
		for j in range(sorted_L[i+1] - sorted_L[i]):
			V[V_index] = 0
			V_index += 1
		V[V_index] = 1
		V_index += 1
	while V_index < (len(V) - 1):
		V[V_index] = 0
		V_index += 1
	print('finish constructing V')
	psi_a = [0 for i in range(m)]
	psi_a[0] = M[0] + L[0]
	print('build psi_a from V')
	for r in range(1, m):
		if V[r] == 0:
			r_prime = rank0(V, r)
			p = psi_b[r_prime]
			psi_a[r] = select0(V, p + 1)
		else:
			r_prime = rank1(V, r)
			k = inv_M[r_prime]
			if k < l - 1:
				psi_a[r] = M[k + 1] + L[k + 1]
			else:
				p = psi_b[0]
				psi_a[r] = select0(V, p + 1)
	print('return psi_a')
	return psi_a

def test(input):
	T = input
	B = ''

	seg_length = 4
	seg = T[len(T) - seg_length:]
	B = seg + B
	pre_psi = brute_force_init_phi(seg)
	psi_a = pre_psi
	iteration = int(len(T) / seg_length)
	for i in range(1, iteration):
		new_seg = T[len(T) - (i+1)*seg_length : len(T) - (i)*seg_length]
		psi_a = next_psi(pre_psi, seg, new_seg, B)
		pre_psi = psi_a
		seg = new_seg
		B = seg + B
	a = psi_a
	b = brute_force_init_phi(T)
	print(a == b)

def readinput():
	T = ''
	# input = 'ACTGCAGTCGATCGATCGATCGATGCATCGATCGCTAGCATCGATCAGTCGATCGATGTCAGTCAGTCGACGATCAGTCGATCGATCGATCGATGCATCGATCGCTAGCATCGATCAGTCGAATCGATGCATCGATCGCTAGCATCGATCAGTCGATCGATGTCAGTCAGTCGACGATCGACTGCAGTCGATCGATCGATCGATGCATCGATCGCTAGCATCGATCAGTCGATCGATGTCAGTCAGTCGACGATCGACTGCAGTCGATCGATCGATCGATGCATCGATCGCTAGCATCGATCAGTCGAATCGATGCATCGATCGCTAGCATCGATCAGTCGATCGATGTCAGTCAGTCGACGATCGACTGCAGTCGATCGATCGATCGATGCATCGATCGCTAGCATCGATCAGTCGATCGATGTCAGTCAGTCGACGATCGACTGCAGTCGATCGATCGATCGATGCATCGATCGCTAGCATCGATCAGTCGAATCGATGCATCGATCGCTAGCATCGATCAGTCGATCGATGTCAGTCAGTCGACGATCGACTGCAGTCGATCGATCGATCGATGCATCGATCGCTAGCATCGATCAGTCGATCGATGTCAGTCAGTCGACGATCGACTGCAGTCGATCGATCGATCGATGCATCGATCGCTAGCATCGATCAGTCGAATCGATGCATCGATCGCTAGCATCGATCAGTCGATCGATGTCAGTCAGTCGACGATCG'
	input = '''NTAACCCTAACCCTAACCCTA
	ACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTA
	ACCCTAACCCTAACCCTAACCCTAACCCAACCCTAACCCTAACCCTAACCCTAACCCTAA
	CCCTAACCCCTAACCCTAACCCTAACCCTAACCCTAACCTAACCCTAACCCTAACCCTAA
	CCCTAACCCTAACCCTAACCCTAACCCTAACCCCTAACCCTAACCCTAAACCCTAAACCC
	TAACCCTAACCCTAACCCTAACCCTAACCCCAACCCCAACCCCAACCCCAACCCCAACCC
	CAACCCTAACCCCTAACCCTAACCCTAACCCTACCCTAACCCTAACCCTAACCCTAACCC
	TAACCCTAACCCCTAACCCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAAC
	CCCTAACCCTAACCCTAACCCTAACCCTCGCGGTACCCTCAGCCGGCGGGCCAGGGTGTGCAGCACCACTGTACAATGGGGAAACTGGCCCAGAGAGGTGA
	GGCAGCTTGCCTGGGGTCACAGAGCAAGGCAAAAGCAGCGCTGGGTACAAGCTCAAAACC
	ATAGTGCCCAGGGCACTGCCGCTGCAGGCGCAGGCATCGCATCACACCAGTGTCTGCGTT
	CACAGCAGGCATCATCAGTAGCCTCCAGAGGCCTCAGGTCCAGTCTCTAAAAATATCTCA
	GGAGGCTGCAGTGGCTGACCATTGCCTTGGACCGCTCTTGGCAGTCGAAGAAGATTCTCC
	TGTCAGTTTGAGCTGGGTGAGCTTAGAGAGGAAAGCTCCACTATGGCTCCCAAACCAGGA
	AGGAGCCATAGCCCAGGCAGGAGGGCTGAGGACCTCTGGTGGCGGCCCAGGGCTTCCAGC
	ATGTGCCCTAGGGGAAGCAGGGGCCAGCTGGCAAGAGCAGGGGGTGGGCAGAAAGCACCC
	GGTGGACTCAGGGCTGGAGGGGAGGAGGCGATCTTGCCCAAGGCCCTCCGACTGCAAGCT
	CCAGGGCCCGCTCACCTTGCTCCTGCTCCTTCTGCTGCTGCTTCTCCAGCTTTCGCTCCT
	TCATGCTGCGCAGCTTGGCCTTGCCGATGCCCCCAGCTTGGCGGATGGACTCTAGCAGAG
	TGGCCAGCCACCGGAGGGGTCAACCACTTCCCTGGGAGCTCCCTGGACTGGAGCCGGGAG
	GTGGGGAACAGGGCAAGGAGGAAAGGCTGCTCAGGCAGGGCTGGGGAAGCTTACTGTGTC
	CAAGAGCCTGCTGGGAGGGAAGTCACCTCCCCTCAAACGAGGAGCCCTGCGCTGGGGAGG
	CCGGACCTTTGGAGACTGTGTGTGGGGGCCTGGGCACTGACTTCTGCAACCACCTGAGCG
	CGGGCATCCTGTGTGCAGATACTCCCTGCTTCCTCTCTAGCCCCCACCCTGCAGAGCTGG
	ACCCCTGAGCTAGCCATGCTCTGACAGTCTCAGTTGCACACACGAGCCAGCAGAGGGGTT
	TTGTGCCACTTCTGGATGCTAGGGTTACACTGGGAGACACAGCAGTGAAGCTGAAATGAA
	AAATGTGTTGCTGTAGTTTGTTATTAGACCCCTTCTTTCCATTGGTTTAATTAGGAATGG
	GGAACCCAGAGCCTCACTTGTTCAGGCTCCCTCTGCCCTAGAAGTGAGAAGTCCAGAGCT
	CTACAGTTTGAAAACCACTATTTTATGAACCAAGTAGAACAAGATATTTGAAATGGAAAC
	TATTCAAAAAATTGAGAATTTCTGACCACTTAACAAACCCACAGAAAATCCACCCGAGTG
	CACTGAGCACGCCAGAAATCAGGTGGCCTCAAAGAGCTGCTCCCACCTGAAGGAGACGCG
	CTGCTGCTGCTGTCGTCCTGCCTGGCGCCTTGGCCTACAGGGGCCGCGGTTGAGGGTGGG
	AGTGGGGGTGCACTGGCCAGCACCTCAGGAGCTGGGGGTGGTGGTGGGGGCGGTGGGGGT
	GGTGTTAGTACCCCATCTTGTAGGTCTGAAACACAAAGTGTGGGGTGTCTAGGGAAGAAG
	GTGTGTGACCAGGGAGGTCCCCGGCCCAGCTCCCATCCCAGAACCCAGCTCACCTACCTT
	GAGAGGCTCGGCTACCTCAGTGTGGAAGGTGGGCAGTTCTGGAATGGTGCCAGGGGCAGA
	GGGGGCAATGCCGGGGCCCAGGTCGGCAATGTACATGAGGTCGTTGGCAATGCCGGGCAG
	GTCAGGCAGGTAGGATGGAACATCAATCTCAGGCACCTGGCCCAGGTCTGGCACATAGAA
	GTAGTTCTCTGGGACCTGCAAGATTAGGCAGGGACATGTGAGAGGTGACAGGGACCTGCA
	GGGGCAGCCAACAAGACCTTGTGTGCACCTCCCATGGGTGGAATAAGGGGCCCAACAGCC
	TTGACTGGAGAGGAGCTCTGGCAAGGCCCTGGGCCACTGCACCTGTCTCCACCTCTGTCC
	CACCCCTCCCACCTGCTGTTCCAGCTGCTCTCTCTTGCTGATGGACAAGGGGGCATCAAA
	CAGCTTCTCCTCTGTCTCTGCCCCCAGCATCACATGGGTCTTTGTTACAGCACCAGCCAG
	GGGGTCCAGGAAGACATACTTCTTCTACCTACAGAGGCGACATGGGGGTCAGGCAAGCTG
	ACACCCGCTGTCCTGAGCCCATGTTCCTCTCCCACATCATCAGGGGCACAGCGTGCACTG
	TGGGGTCCCAGGCCTCCCGAGCCGAGCCACCCGTCACCCCCTGGCTCCTGGCCTATGTGCCCGCCCGCCCGGG
	TCTGACCTGAGGAGAACTGTGCTCCGCCTTCAGAGTACCACCGAAATCTGTGCAGAGGAC
	AACGCAGCTCCGCCCTCGCGGTGCTCTCCGGGTCTGTGCTGAGGAGAACGCAACTCCGCC
	GTTGCAAAGGCGCGCCGCGCCGGCGCAGGCGCAGAGAGGCGCGCCGCGCCGGCGCAGGCG
	CAGAGAGGCGCGCCGCGCCGGCGCAGGCGCAGAGAGGCGCGCCGCGCCGGCGCAGGCGCA
	GAGAGGCGCGCCGCGCCGGCGCAGGCGCAGAGAGGCGCGCCGCGCCGGCGCAGGCGCAGA
	CACATGCTAGCGCGTCGGGGTGGAGGCGTGGCGCAGGCGCAGAGAGGCGCGCCGCGCCGG
	CGCAGGCGCAGAGACACATGCTACCGCGTCCAGGGGTGGAGGCGTGGCGCAGGCGCAGAG
	AGGCGCACCGCGCCGGCGCAGGCGCAGAGACACATGCTAGCGCGTCCAGGGGTGGAGGCG
	TGGCGCAGGCGCAGAGACGCAAGCCTACGCTCTCGCAGGCTTAGTCCCAGAGCTTCAGGTGGGGCTGCCCACAGAGCTCCTCAGTCTAA
	GCCAAGTGGTGTGTCATAGTCCCCTGGCCCCATTAATGGATTCTGGGATAGACATGAGGA
	CCAAGCCAGGTGGGATGAGTGAGTGTGGCTTCTGGAGGAAGTGGGGACACAGGACAGCAT
	TCTTTCCTGCTGGACCTGACCCTGTGTCATGTCACCTTGCTACCACGAGAGCATGGCCTG
	TCTGGGAATGCAGCCAGACCCAAAGAAGCAAACTGACATGGAAGGAAAGCAAAACCAGGC
	CCTGAGGACATCATTTTAGCCCTTACTCCGAAGGCTGCTCTACTGATTGGTTAATTTTTG
	CTTAGCTTGGTCTGGGGAGTTCTGACAGGCGTGCCACCAATTCTTACCGATTTCTCTCCA
	CTCTAGACCCTGAGAAGCCCACGCGGTTCATGCTAGCAATTAACAATCAATCTCGCCCTA
	TGTGTTCCCATTCCAGCCTCTAGGACACAGTGGCAGCCACATAATTGGTATCTCTTAAGG
	TCCAGCACGAGGTGGAGCACATGGTGGAGAGACAGATGCAGTGACCTGGAACCCAGGAGT
	GAGGGAGCCAGGACTCAGGCCCAAGGCTCCTGAGAGGCATCTGGCCCTCCCTGCGCTGTG
	CCAGCAGCTTGGAGAACCCACACTCAATGAACGCAGCACTCCACTACCCAGGAAATGCCT
	TCCTGCCCTCTCCTCATCCCATCCCTGGGCAGGGGACATGCAACTGTCTACAAGGTGCCA
	AGTACCAGGACAGGAAAGGAAAGACGCCAAAAATCCAGCGCTGCCCTCAGAGAAGGGCAA
	CCACGCAGTCCCCATCTTGGCAAGGAAACACAATTTCCGAGGGAATGGTTTTGGCCTCCA
	TTCTAAGTGCTGGACATGGGGTGGCCATAATCTGGAGCTGATGGCTCTTAAAGACCTGCA
	TCCTCTTCCCTAGGTGTCCCTCGGGCACATTTAGCACAAAGATAAGCACAAAAGGTGCAT
	CCAGCACTTTGTTACTATTGGTGGCAGGTTTATGAATGGCAACCAAAGGCAGTGTACGGG
	TCAAGATTATCAACAGGGAAGAGATAGCATTTCCTGAAGGCTTCCTAGGTGCCAGGCACT
	GTTCCATTCCTTTGCATGTTTTGATTAATTTAATATTTAAAATAATTCTACCAGGAAGCT
	ACCATTATTACCACAACTTCACAAATGAGAACACCGAGGCTTAGAGGGGTTGGGTTGCCC
	AAGGTTACAGAGGAAGAAAACAGGGGAGCTGGATCTGAGCCAAGGCATCAACTCCAAGGT
	AACCCCTCAGTCACTTCACTGTGTGTCCCCTGGTTACTGGGACATTCTTGACAAACTCGG
	GGCAAGCCGGTGAGTCAGTGGGGGAGGACTTTCAGGAAGAGGTGGGTTCCCAGTTGGTGA
	CAGAAGAGGAGGCTGCAAAGTGAAGGAGCAGGGGCTCCAGGTCTGGCGACAACCAGGGAA
	GGGACAGGGCAGGGATGGCTTGGACCACGAGAGGCACCTGAGTCAGGCAGTCACATACTT
	CCCACTGGGGTCTACCATGTGAGGCATGGTGTGGGATCCTGGGAAGGAGACCAAGCCTCA
	TTTCAGTTTGCTTATGGCCAAAGACAGGACCTGTGTACCCGACAACCCCTGGGACCTTTA
	CCAAAAAAAGAGCAAACACCATTCACTCACTCATGTTAGATAAACACTGAGTGAAGTCAC
	TGGAGCCCAAGGACTGTGCGAGGTCAGCACTGCCAATACAAGAAGCTGCAGCCCTCCAGC
	TCGCCTCCCTCAATGGCCACTCCGTGCTCCAGCCATGCTGGCTTCCTTTTAGGTCCTCCA
	CCTCCAGGCTGTAGTTCATGTGCTTCTTTCTGGAATGTTCTTCCCAACCTACCCACTCAA
	CCCTCAGACTTTACCATAAATGTCATTTCCTCACGTCTGCCTTCCCTGACCTGAGACCAA
	GCCAGGCTTCCCATGACGAGCCTCACAGTACCCCATCTCCCCTGAACAGATGCAGTAATA
	ACCTACATAACCCGGGGCCATGATCTATGGCTTTGAATCCTGGCTCTGTCACTAGGCCAG
	GTCTCTCAGCCCTTCTGTGCCTCAGTTTCCTCATCTATAAAATGAGATGACGGCAGTGCC
	TGCTCATGAAGTGTGAGTTAATGCACTCAAATCAATGGTTGTGCACGGTTTATATGAATA
	TTAGTGATTACAAAATATTATCAATAGACCTTGTCACAACTGTTATTGAAGAACTAATCA
	TCTATTGCTTATTTAGGTCTTTCTCTCCTGCCAGAATGTGCGCTCCAGGTGGAGAGGTAT
	GTTGCCTTATCCGTGGCTGGATATATAGAGATTCCCACACTGCCTTGCACACGAGCACTG
	CTGGGTAAATATTTGTTGGCTGCAGGAAAACGTGAAGGAATAGGCCCTCCAATGGGAGGA
	AAAGCATGAGTTGTGAGAGCAGAGCCACCACAGGAAACCAGGAGGCTAAGTGGGGTGGAA
	GGGAGTGAGCTCTCGGACTCCCAGGAGTAAAAGCTTCCAAGTTGGGCTCTCACTTCAGCC
	CCTCCCACACAGGGAAGCCAGATGGGTTCCCCAGGACCGGGATTCCCCAAGGGGGCTGCT
	CCCAGAGGGTGTGTTGCTGGGATTGCCCAGGACAGGGATGGCCCTCTCATCAGGTGGGGG
	TGAGTGGCAGCACCCACCTGCTGAAGATGTCTCCAGAGACCTTCTGCAGGTACTGCAGGG
	CATCCGCCATCTGCTGGACGGCCTCCTCTCGCCGCAGGTCTGGCTGGATGAAGGGCACGG
	CATAGGTCTGACCTGCCAGGGAGTGCTGCATCCTCACAGGAGTCATGGTGCCTGTGGGTC
	GGAGCCGGAGCGTCAGAGCCACCCACGACCACCGGCACGCCCCCACCACAGGGCAGCGTG
	GTGTTGAGACAACACAGCCCTCATCCCAACTATGCACATAGCTTCAGCCTGCACAGATAG
	GGGAGTAGGGGACAGAGCATTTGCTGAGAGGCCAGGAGCGCATAGATGGGACTCTGCTGA
	TGCCTGCTGAGTGAATGAGGGAAAGGGCAGGGCCCGGGACTGGGGAATCTGTAGGGTCAA
	TGGAGGAGTTCAGAGAAGGTGCAACATTTCTGACCCCCTACAAGGTGCTTGCTACCTGCC
	AGGCACCCTTTCCATACCTTGTCTCAGTTCAGCTCCCCACCTTGGATAAACAAGAAACCT
	TGGTTGCAGAGGAAAAAAGAGGCTGGAAACAAAGGGGTAGAAATGGGGTAGCAGGGGAGA
	TTGCCTGATCAACTGCCAAATGGTACACAGTTCTGGAAAAGCACAAAAAATGTGCACACA
	CGGGTTCTTCCCACTTTAACCCCTGAGGAATCTGAGGCCTGCTCCTGAAACAGACTGGGC
	AGTGGCTAGTGACTCTAGGTATAGGAGTATCCAGCCCTGCTCACCCAGGCTAGAGCTTAG
	GGGGACAAGAGGAAAGAGGTGCCTGTGGGGGTGGAGGACAGGAAGGAAAAACACTCCTGG
	AATTGCAAAGTGAGGGCAGAGTCTATTTATATTGGGTTTAATTAACTCCTCTCCCTGGTG
	CCACTAAAGCAGCAATCACACTGCAGACAGCACTGATTTGATTGGCAAGAGATGCACCAG
	GCAGAATATTAAGGGACCAGGCCCCTATAAATAGGCCTAATCACAGCCCCTCACTGGAAA
	ATGGTAAGGAAGACATTAATCAGGCCTGGCACTGTGCCCTAGACCTGCTCCCCTAGGCAC
	TACAGTGGGGCCCTTGGTTGCAACACAAGTAGGTAGGGATGGATGAGTGTGGCATGAAGG
	GCCTAGGAGATTTCACTTGGGTTTAAAATGCTGTGACCTTGAGTAAGTTGCCGTCTCTGA
	ATCTGATCCTTTCGATTTCCCATTCTCCAAACTGAGAACTAGCACTGCTGAGACGTGGTT
	ATTTCCAATAATAATTTGTATATTTTACATAACGCACCACACCAACATCTTCACCCAGTT
	GGAGCCTACTCCTTTGCTCCCGCTGCTGGCTTCCCCAGCCCTCCCTTCTGCCCTCCTCAG
	GCCAGCACTTTTCAGTGAGTTCCTCCTTTGCATACAGGCTTTCCAGATCTGTACTTGCCT
	TGAATACTCATCAGAGCCCAGGAGTTACTCCTCACCTCCCACTTATTTTTCCTCCCATCA
	AATAACTAAAGCATGGCCAGCTGATGCCCAGCCAACTGAGAAACCCAACCCTCTGAGACC
	AGCACACCCCTTTCAAGCATGTTCCTCCCTCCCCTTCTTTGTATTTATACTGATGCAAGT
	TTGCTGGCTGTCCTAACTTATTTCTGTGCCTCAGTTCTCCCATATGTAAGATCACAAAGG
	GGGTAAAGATGCAAGATATTTCCTGTGCACATCTTCAGATGAATTTCTTGTTAGTGTGTG
	TGTGTTTGCTCACACATATGCGTGAAAGAAGAGTACATACACAGATCTCCTCAAAAAGGA
	GGCAGCAAGCCCGTTCAAGAATGGGACTGAATACACCTGATGAGTGGTTTACTTTCTGTC
	TGCAAACATCTACTGATCATCTGTTAGGTGCAGGCCATGATCACAACAAAGACGAATAAG
	ACACTACACTAGCCAGGGAGAGTCTCAAAAACAACTAAACTCAAATTAAATTCATTCTAC
	TCCAGTCATGGGTACAAAGCTAAGGAGTGACAAATCCCTCTTGGAGTTAGGGGAGTCAGG
	AAAAAGCTCTTAGCAGAATGTGTGCCTCTCGGCCGGGCGCAGCGGCTCACGCCTGTAATC
	CCAGCACTTTGGGAGGCGAAGGCAGGCAGATCACCTGAGGTCGGGAGTTCGAGACCAGTC
	TGACCAACATGGTGAAACTCCATCTCTACTAAAAATACAAAATTAGCCAGGCGTGGTGGT
	GCATGCCTGTAATCCCCGCTACTCGGGAGGCTGAGGAAGGAGAATCACTTGAACCAGGAA
	GGTGGAGGTTGCAGTGTGCCAAGATCGCGCCATGGCACTCCAGCCTAGGCAACGAGGGTG
	AACCAGGTCCAGGAAGAAGGTGCAAAGACAGCATTCCAGGTAAAAGAAACAGCTTGAACA
	AAAAGTGTGTAGGGGAACCGCAAGCGGTCTTGAGTGCTGAGGGTACAATCATCCTTGGGG
	AAGTACTAGAAGAAAGAATGATAAACAGAGGCCAGTTTGTTAAAAACACTCAAAATTAAA
	GCTAGGAGTTTGGACTTGTGGCAGGAATGAAATCCTTAGACCTGTGCTGTCCAATATGGT
	AGCCACCAGGCACATGCAGCCACTGAGCACTTGAAATGTGGATAGTCTGAATTGAGATGT
	GCCATAAGTGTAAAATATGCACCAAATTTCAAAGGCTAGAAAAAAAGAATGTAAAATATC
	TTATTATTTTATATTGATTACGTGCTAAAATAACCATATTTGGGATATACTGGATTTTAA
	AAATATATCACTAATTTCATCTGTTTCTTTTTACTTTTAGAAATCACATATGTGACTTAA
	ATATTTCTTTTCTTTTTCTTTCCTCTCACTCAGCGTCCTGTGATTCCAAAGAAATGAGTC
	TCTGCTGTTTTTGGGCAGCAGATATCCTAGAATGGACTCTGACCTAAGCATCAAAATTAA
	TCATCATAACGTTATCATTTTATGGCCCCTTCTTCCTATATCTGGTAGCTTTTAAATGAT
	GACCATGTAGATAATCTTTATTGTCCCTCTTTCAGCAGACGGTATTTTCTTATGCTACAG
	TATGACTGCTAATAATACCTACACATGTTAGAACCATTCTGACTCCTCAAGAATCTCATT
	TAACTCTTATTATCAGTGAATTTATCATCATCCCCTATTTTACATAAGGAAATGGGGTTA
	GAAAGACCAAATAACATTTTTTCAACATCAAAACACTAGCTTGAGATCAAGCCCAGACTT
	GGATCTGTCGTCTGAATTCCAAGCTTTTTGTTATTTATTGATATGTTTTGTTGTTTTCAT
	GCAATAATGCAAATCTTAGCCCAAACATTTTGTTAGTAGTACCAACTGTAAGTCACCTTA
	TCTTCATACTTTGTCTTTATGTAAACCTAAATTAGATCTGTTTTTGATACTGAGGGAAAA
	ACAAGGGAATCTAACACTAACCAGCCCGTAGTGTGTGGTCAACACTTTCGTTACTTTAGT
	ATACATCACCCCAATTGTTTGTCTTCACCACACACTTTGGAGTTAGGTAGTAGTATCTAT
	TTTTACAAATAAGAAAACCCAGGCACAAAGGGGTTGATTAGCAATTATCTTTTGAAAAGC
	CTGTAGTTGCTCATCTGAAGAAGTGACGGACCACCTCTTATTTAGTGGACAGACAGTAAC
	TAGTTGAGAAGACAGGGGATTTTGTTGGCGGAAAAAAAAATTTATCAAAAGTCGTCTTCT
	ATCAGGGAGTTTTATGAGAAACCCTAGCTCCTCAGTTCCACAGTGGGTAACTGTAATTCA
	TTCTAGGTCTGCGATATTTCCTGCCTATCCATTTTGTTAACTCTTCAATGCATTCCACAA
	ATACCTAAGTATTCTTTAATAATGGTGGTTTTTTTTTTTTTTTGCATCTATGAAGTTTTT
	TCAAATTCTTTTTAAGTGACAAAACTTGTACATGTGTATCGCTCAATATTTCTAGTCGAC
	AGCACTGCTTTCGAGAATGTAAACCGTGCACTCCCAGGAAAATGCAGACACAGCACGCCT
	CTTTGGGACCGCGGTTTATACTTTCGAAGTGCTCGGAGCCCTTCCTCCAGACCGTTCTCC
	CACACCCCGCTCCAGGGTCTCTCCCGGAGTTACAAGCCTCGCTGTAGGCCCCGGGAACCC
	AACGCGGTGTCAGAGAAGTGGGGTCCCCTACGAGGGACCAGGAGCTCCGGGCGGGCAGCA
	GCTGCGGAAGAGCCGCGCGAGGCTTCCCAGAACCCGGCAGGGGCGGGAAGACGCAGGAGT
	GGGGAGGCGGAACCGGGACCCCGCAGAGCCCGGGTCCCTGCGCCCCACAAGCCTTGGCTT
	CCCTGCTAGGGCCGGGCAAGGCCGGGTGCAGGGCGCGGCTCCAGGGAGGAAGCTCCGGGG
	CGAGCCCAAGACGCCTCCCGGGCGGTCGGGGCCCAGCGGCGGCGTTCGCAGTGGAGCCGG
	GCACCGGGCAGCGGCCGCGGAACACCAGCTTGGCGCAGGCTTCTCGGTCAGGAACGGTCC
	CGGGCCTCCCGCCCGCCTCCCTCCAGCCCCTCCGGGTCCCCTACTTCGCCCCGCCAGGCC
	CCCACGACCCTACTTCCCGCGGCCCCGGACGCCTCCTCACCTGCGAGCCGCCCTCCCGGA
	AGCTCCCGCCGCCGCTTCCGCTCTGCCGGAGCCGCTGGGTCCTAGCCCCGCCGCCCCCAG
	TCCGCCCGCGCCTCCGGGTCCTAACGCCGCCGCTCGCCCTCCACTGCGCCCTCCCCGAGC
	GCGGCTCCAGGACCCCGTCGACCCGGAGCGCTGTCCTGTCGGGCCGAGTCGCGGGCCTGG
	GCACGGAACTCACGCTCACTCCGAGCTCCCGACGTGCACACGGCTCCCATGCGTTGTCTT
	CCGAGCGTCAGGCCGCCCCTACCCGTGCTTTCTGCTCTGCAGACCCTCTTCCTAGACCTC
	CGTCCTTTGTCCCATCGCTGCCTTCCCCTCAAGCTCAGGGCCAAGCTGTCCGCCAACCTC
	GGCTCCTCCGGGCAGCCCTCGCCCGGGGTGCGCCCCGGGGCAGGACCCCCAGCCCACGCC
	CAGGGCCCGCCCCTGCCCTCCAGCCCTACGCCTTGACCCGCTTTCCTGCGTCTCTCAGCC
	TACCTGACCTTGTCTTTACCTCTGTGGGCAGCTCCCTTGTGATCTGCTTAGTTCCCACCC
	CCCTTTAAGAATTCAATAGAGAAGCCAGACGCAAAACTACAGATATCGTATGAGTCCAGT
	TTTGTGAAGTGCCTAGAATAGTCAAAATTCACAGAGACAGAAGCAGTGGTCGCCAGGAAT
	GGGGAAGCAAGGCGGAGTTGGGCAGCTCGTGTTCAATGGGTAGAGTTTCAGGCTGGGGTG
	ATGGAAGGGTGCTGGAAATGAGTGGTAGTGATGGCGGCACAACAGTGTGAATCTACTTAA
	TCCCACTGAACTGTATGCTGAAAAATGGTTTAGACGGTGAATTTTAGGTTATGTATGTTT
	TACCACAATTTTTAAAAAGCTAGTGAAAAGCTGGTAAAAAGAAAGAAAAGAGGCTTTTTT
	AAAAAGTTAAATATATAAAAAGAGCATCATCAGTCCAAAGTCCAGCAGTTGTCCCTCCTG
	GAATCCGTTGGCTTGCCTCCGGCATTTTTGGCCCTTGCCTTTTAGGGTTGCCAGATTAAA
	AGACAGGATGCCCAGCTAGTTTGAATTTTAGATAAACAACGAATAATTTCGTAGCATAAA
	TATGTCCCAAGCTTAGTTTGGGACATACTTATGCTAAAAAACATTATTGGTTGTTTATCT
	GAGATTCAGAATTAAGCATTTTATATTTTATTTGCTGCCTCTGGCCACCCTACTCTCTTC
	CTAACACTCTCTCCCTCTCCCAGTTTTGTCCGCCTTCCCTGCCTCCTCTTCTGGGGGAGT
	TAGATCGAGTTGTAACAAGAACATGCCACTGTCTCGCTGGCTGCAGCGTGTGGTCCCCTT
	ACCAGAGGTAAAGAAGAGATGGATCTCCACTCATGTTGTAGACAGAATGTTTATGTCCTC
	TCCAAATGCTTATGTTGAAACCCTAACCCCTAATGTGATGGTATGTGGAGATGGGCCTTT
	GGTAGGTAATTACGGTTAGATGAGGTCATGGGGTGGGGCCCTCATTATAGATCTGGTAAG
	AAAAGAGAGCATTGTCTCTGTGTCTCCCTCTCTCTCTCTCTCTCTCTCTCTCATTTCTCT
	CTATCTCATTTCTCTCTCTCTCGCTATCTCATTTTTCTCTCTCTCTCTTTCTCTCCTCTG
	TCTTTTCCCACCAAGTGAGGATGCGAAGAGAAGGTGGCTGTCTGCAAACCAGGAAGAGAG
	CCCTCACCGGGAACCCGTCCAGCTGCCACCTTGAACTTGGACTTCCAAGCCTCCAGAACT
	GTGAGGGATAAATGTATGATTTTAAAGTCGCCCAGTGTGTGGTATTTTGTTTTGACTAAT
	ACAACCTGAAAACATTTTCCCCTCACTCCACCTGAGCAATATCTGAGTGGCTTAAGGTAC
	TCAGGACACAACAAAGGAGAAATGTCCCATGCACAAGGTGCACCCATGCCTGGGTAAAGC
	AGCCTGGCACAGAGGGAAGCACACAGGCTCAGGGATCTGCTATTCATTCTTTGTGTGACC
	CTGGGCAAGCCATGAATGGAGCTTCAGTCACCCCATTTGTAATGGGATTTAATTGTGCTT
	GCCCTGCCTCCTTTTGAGGGCTGTAGAGAAAAGATGTCAAAGTATTTTGTAATCTGGCTG
	GGCGTGGTGGCTCATGCCTGTAATCCTAGCACTTTGGTAGGCTGACGCGAGAGGACTGCT
	TGAGCCCAAGAGTTTGAGATCAGCCTGGGCAATATTGTGAGATTCCATCTCTACAAAAAT
	AAAATAAAATAGCCAGTCATGGTGTCACACACCTGTAGTCCCAGCTACATGGGAGGCTGA
	GGCGGGAGGATCACTTGAGCTTGGGAGATCGAGGCTGCAGTGAGCTATGATTGTACCACT
	GCACTCCAGGCTGGGCGACAGAGAGAGACCCTGTCTCAGAAAAAAAAAAAAAAGTACTTT
	GTAATCTGTAAGGTTTATTTCAACACACACAAAAAAAGTGTATATGCTCCACGATGCCTG
	TGAATATACACACACACCACATCATATACCAAGCCTGGCTGTGTCTTCTCACAAATGCAC
	TGCTAGGCACCACCCCCAGTTCTAGAATCACACCAGCCAGTTCACCCTCCAGATGGTTCA
	CCCTCAACTTCATAAAAGTTCCCTACCTAATCTACTGACAGGCTCATCCCCGACCTAATT
	TTAAAGATTTCCTAGGAGCTGCAGTGGGAATCCTGGACCTCAGCCTGGACAAAGAACAGC
	TGCAGGTCATTCTCATGTGTGGACACAGAAGCTCTGCCTGCCTTTGCTGGCCAGCTGGGC
	GGCGGGGGTTGGGGGGGCGTGTGTTGCAGGA
	GCAAAGTCGCACGGCGCCGGGCTGGGGCGGGGGGAGGGTGGCGCCGTGCACGCGCAGAAA'''
	for i in input:
		if i == 'A' or i == 'C' or i == 'G' or i == 'T' or i == 'N':
			T += i
	T += '$'
	return T

def main():
	T = readinput()
	B = ''
	n = len(T)
	print(n)
	seg_length = int(n / math.log(n, 2))
	init_length = n % seg_length + seg_length
	seg = T[n - init_length:]
	B = seg + B
	pre_psi = brute_force_init_phi(seg)
	psi_a = pre_psi
	iteration = int(len(T) / seg_length)
	head_index = n - init_length - seg_length
	tail_index = n - init_length
	for i in range(1, iteration):
		print(i, '/', iteration)
		new_seg = T[head_index : tail_index]
		head_index -= seg_length
		tail_index -= seg_length
		psi_a = next_psi(pre_psi, seg, new_seg, B)
		pre_psi = psi_a
		seg = new_seg
		B = seg + B
	# print(psi_a)
	b = brute_force_init_phi(T)
	# print(brute_force_init_phi(T))
	print(psi_a == b)
	info = psutil.virtual_memory()
	print (u'内存使用：',psutil.Process(os.getpid()).memory_info().rss)
	print (u'总内存：',info.total)
	print (u'内存占比：',info.percent)
	print (u'cpu个数：',psutil.cpu_count())
	print(len(T))
	for i in range(len(psi_a)):
		if (psi_a[i] != b[i]):
			print(i)

if __name__ == '__main__':
	main()
	# RBc = range(3, 5)
	# psi_b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
	# i = [psi_b[x] for x in RBc]
	# print(i)
	# benchmark = 7
	# print(bin_search_L(RBc, psi_b, benchmark))

	# t = [8, 3, 4, 7, 9, 0, 5, 6, 11, 10, 12, 13, 14, 15, 1, 2]